childnumber = 0

// Initialize variables of query
query = ""
user_social_club_name_input = ""
user_alcohol_permitted_selection = ""

// Start query.
g.V
.sideEffect{ start_linenumber = it.lineno }

// Parent #0
.filter{ isType(it, "AST_ASSIGN") }
.filter{ isType(it.ithChildren(0), "AST_VAR") }

// Remember variable user_alcohol_permitted_selection
.sideEffect{ user_alcohol_permitted_selection = it.ithChildren(0).varToName().next() }
.filter{ isType(it.ithChildren(0).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1), "AST_DIM") }
.filter{ isType(it.ithChildren(1).ithChildren(0), "AST_VAR") }
.filter{ isType(it.ithChildren(1).ithChildren(0).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1).ithChildren(1), "string") }
.sideEffect{ childnumber = it.childnum }
.sideEffect{ childnumber = childnumber + 1 }

// Go up one level.
.parents()
.children()

// Check next AST-node (similar to next line of code)
.filter{ it.childnum == childnumber }

// Parent #1
.filter{ isType(it, "AST_ASSIGN") }
.filter{ isType(it.ithChildren(0), "AST_VAR") }

// Remember variable query
.sideEffect{ query = it.ithChildren(0).varToName().next() }
.filter{ isType(it.ithChildren(0).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1), "AST_ENCAPS_LIST") }
.filter{ isType(it.ithChildren(1).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1).ithChildren(1), "AST_VAR") }

// Remember variable user_social_club_name_input
.sideEffect{ user_social_club_name_input = it.ithChildren(1).ithChildren(1).varToName().next() }
.filter{ isType(it.ithChildren(1).ithChildren(1).ithChildren(0), "string") }
.sideEffect{ childnumber = it.childnum }
.sideEffect{ childnumber = childnumber + 1 }

// Go up one level.
.parents()
.children()

// Check next AST-node (similar to next line of code)
.filter{ it.childnum == childnumber }

// Parent #2
.filter{ isType(it, "AST_ASSIGN_OP") }
.filter{ isType(it.ithChildren(0), "AST_VAR") }
.filter{ it.ithChildren(0).varToName().next() == query }
.filter{ isType(it.ithChildren(0).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1), "AST_ENCAPS_LIST") }
.filter{ isType(it.ithChildren(1).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1).ithChildren(1), "AST_VAR") }
.filter{ it.ithChildren(1).ithChildren(1).varToName().next() == user_alcohol_permitted_selection }
.filter{ isType(it.ithChildren(1).ithChildren(1).ithChildren(0), "string") }

// Prepare end of query.

.sideEffect{ end_linenumber = it.lineno }
.toFile()
.fileToPath().sideEffect{ filename = it }

// Print all found results.
.transform{ printFoundCC(start_linenumber, end_linenumber, filename) }
