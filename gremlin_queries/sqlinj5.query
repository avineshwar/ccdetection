childnumber = 0

// Initialize variables of query
eintrag = ""
url = ""
eintragen = ""
beschreibung = ""
urlname = ""
name = ""

// Start query.
g.V
.sideEffect{ start_linenumber = it.lineno }

// Parent #0
.filter{ isType(it, "AST_ASSIGN") }
.filter{ isType(it.ithChildren(0), "AST_VAR") }

// Remember variable eintrag
.sideEffect{ eintrag = it.ithChildren(0).varToName().next() }
.filter{ isType(it.ithChildren(0).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1), "AST_ENCAPS_LIST") }
.filter{ isType(it.ithChildren(1).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1).ithChildren(1), "AST_VAR") }

// Remember variable url
.sideEffect{ url = it.ithChildren(1).ithChildren(1).varToName().next() }
.filter{ isType(it.ithChildren(1).ithChildren(1).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1).ithChildren(2), "string") }
.filter{ isType(it.ithChildren(1).ithChildren(3), "AST_VAR") }

// Remember variable urlname
.sideEffect{ urlname = it.ithChildren(1).ithChildren(3).varToName().next() }
.filter{ isType(it.ithChildren(1).ithChildren(3).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1).ithChildren(4), "string") }
.filter{ isType(it.ithChildren(1).ithChildren(5), "AST_VAR") }

// Remember variable name
.sideEffect{ name = it.ithChildren(1).ithChildren(5).varToName().next() }
.filter{ isType(it.ithChildren(1).ithChildren(5).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1).ithChildren(6), "string") }
.filter{ isType(it.ithChildren(1).ithChildren(7), "AST_VAR") }

// Remember variable beschreibung
.sideEffect{ beschreibung = it.ithChildren(1).ithChildren(7).varToName().next() }
.filter{ isType(it.ithChildren(1).ithChildren(7).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1).ithChildren(8), "string") }
.sideEffect{ childnumber = it.childnum }
.sideEffect{ childnumber = childnumber + 1 }

// Go up one level.
.parents()
.children()

// Check next AST-node (similar to next line of code)
.filter{ it.childnum == childnumber }

// Parent #1
.filter{ isType(it, "AST_ASSIGN") }
.filter{ isType(it.ithChildren(0), "AST_VAR") }

// Remember variable eintragen
.sideEffect{ eintragen = it.ithChildren(0).varToName().next() }
.filter{ isType(it.ithChildren(0).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1), "AST_CALL") }
.filter{ isType(it.ithChildren(1).ithChildren(0), "AST_NAME") }
.filter{ isType(it.ithChildren(1).ithChildren(0).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1).ithChildren(1), "AST_ARG_LIST") }
.filter{ isType(it.ithChildren(1).ithChildren(1).ithChildren(0), "AST_VAR") }
.filter{ it.ithChildren(1).ithChildren(1).ithChildren(0).varToName().next() == eintrag }
.filter{ isType(it.ithChildren(1).ithChildren(1).ithChildren(0).ithChildren(0), "string") }
.sideEffect{ childnumber = it.childnum }
.sideEffect{ childnumber = childnumber + 1 }

// Go up one level.
.parents()
.children()

// Check next AST-node (similar to next line of code)
.filter{ it.childnum == childnumber }

// Parent #2
.filter{ isType(it, "NULL") }
.sideEffect{ childnumber = it.childnum }
.sideEffect{ childnumber = childnumber + 1 }

// Go up one level.
.parents()
.children()

// Check next AST-node (similar to next line of code)
.filter{ it.childnum == childnumber }

// Parent #3
.filter{ isType(it, "AST_ECHO") }
.filter{ isType(it.ithChildren(0), "string") }
.sideEffect{ childnumber = it.childnum }
.sideEffect{ childnumber = childnumber + 1 }

// Go up one level.
.parents()
.children()

// Check next AST-node (similar to next line of code)
.filter{ it.childnum == childnumber }

// Parent #4
.filter{ isType(it, "AST_IF") }
.filter{ isType(it.ithChildren(0), "AST_IF_ELEM") }
.filter{ isType(it.ithChildren(0).ithChildren(0), "AST_BINARY_OP") }
.filter{ isType(it.ithChildren(0).ithChildren(0).ithChildren(0), "AST_VAR") }
.filter{ it.ithChildren(0).ithChildren(0).ithChildren(0).varToName().next() == eintragen }
.filter{ isType(it.ithChildren(0).ithChildren(0).ithChildren(0).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(0).ithChildren(0).ithChildren(1), "AST_CONST") }
.filter{ isType(it.ithChildren(0).ithChildren(0).ithChildren(1).ithChildren(0), "AST_NAME") }
.filter{ isType(it.ithChildren(0).ithChildren(0).ithChildren(1).ithChildren(0).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(0).ithChildren(1), "AST_STMT_LIST") }
.filter{ isType(it.ithChildren(0).ithChildren(1).ithChildren(0), "AST_STMT_LIST") }
.filter{ isType(it.ithChildren(0).ithChildren(1).ithChildren(0).ithChildren(0), "AST_ECHO") }
.filter{ isType(it.ithChildren(0).ithChildren(1).ithChildren(0).ithChildren(0).ithChildren(0), "string") }
.filter{ isType(it.ithChildren(1), "AST_IF_ELEM") }
.filter{ isType(it.ithChildren(1).ithChildren(0), "NULL") }
.filter{ isType(it.ithChildren(1).ithChildren(1), "AST_STMT_LIST") }
.filter{ isType(it.ithChildren(1).ithChildren(1).ithChildren(0), "AST_STMT_LIST") }
.filter{ isType(it.ithChildren(1).ithChildren(1).ithChildren(0).ithChildren(0), "AST_ECHO") }
.filter{ isType(it.ithChildren(1).ithChildren(1).ithChildren(0).ithChildren(0).ithChildren(0), "string") }

// Prepare end of query.

.sideEffect{ end_linenumber = it.lineno }
.toFile()
.fileToPath().sideEffect{ filename = it }

// Print all found results.
.transform{ printFoundCC(start_linenumber, end_linenumber, filename) }
